version: '3.8'

services:
  # Flask API Backend
  api:
    build: .
    container_name: health-tracker-api
    ports:
      - "5001:5001"
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://healthuser:healthpass@postgres:5432/healthtracker
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-change-in-production}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-jwt-secret-key-change-in-production}
    depends_on:
      - postgres
    volumes:
      - ./static:/app/static
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Streamlit ML Application
  streamlit:
    build: 
      context: .
      dockerfile: Dockerfile.streamlit
    container_name: health-tracker-streamlit
    ports:
      - "8501:8501"
    environment:
      - STREAMLIT_SERVER_PORT=8501
    volumes:
      - ./models:/app/models
      - ./data:/app/data
    restart: unless-stopped
    command: ["streamlit", "run", "streamlit_app.py", "--server.port=8501", "--server.address=0.0.0.0"]

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: health-tracker-db
    environment:
      - POSTGRES_DB=healthtracker
      - POSTGRES_USER=healthuser
      - POSTGRES_PASSWORD=healthpass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped

  # Redis (for rate limiting and caching)
  redis:
    image: redis:7-alpine
    container_name: health-tracker-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: health-tracker-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
      - streamlit
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: health-tracker-network
